/**
/* - Place your global snippets here.
/* - Each snippet is defined under a snippet name and has a scope, prefix, body and description.
/* - Add comma separated ids of the languages where the snippet is applicable in the scope field.
/* - If scope is left empty or omitted, the snippet gets applied to all languages.
/* - The prefix is what is used to trigger the snippet and the body will be expanded and inserted.
/* - Possible variables are: "$1", "$2", "$<N>" for tab stops, "$0" for the final cursor position, and "${1:<LABEL>}", "${2:<LABEL>}", "${<N>:<LABEL>}" for placeholders. 
/* - Placeholders with the same IDs are connected, so if you have two "$1" they will be editable at the same time.
**/
{
    /* ------------------------- */
    /* Utility snippets          */
    /* ------------------------- */
    "Console log": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "lg",
        "body": [
            "console.log(${1:args});",
        ],
        "description": "Create a console log statement"
    },

    /* ------------------------- */
    /* Function snippets         */
    /* ------------------------- */
    "Function statement": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "fns",
        "body": [
            "function ${1:name}(${2:params}) {",
            "    $3",
            "}",
        ],
        "description": "Create a function statement"
    },

    "Function expression": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "fnexp",
        "body": [
            "const ${1:name} = function(${2:params}) {",
            "    $3",
            "}",
        ],
        "description": "Create a traditional function expression"
    },

    "Arrow function": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "arrfn",
        "body": [
            "const ${1:name} = (${2:param}) => {",
            "    $3",
            "}",
        ],
        "description": "Create an arrow function expression"
    },

    /* ------------------------- */
    /* Control Flow snippets     */
    /* ------------------------- */
    "If statement": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "ifs",
        "body": [
            "if (${1:condition}) {",
            "    $2",
            "}",
        ],
        "description": "Create an if statement"
    },
    "For loop": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "forl",
        "body": [
            "for (let ${1:i} = ${2:start}; ${1:i} < ${3:end}; ${1:i}++) {",
            "    $4",
            "}"
        ],
        "description": "Create a C-style for loop"
    },

    /* ------------------------- */
    /* Error Handling snippets   */
    /* ------------------------- */
    "Throw exception": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "thnw",
        "body": [
            "throw new ${1:Exception}(${2:args});",
            
        ],
        "description": "Create a throw exception statement"
    }
}